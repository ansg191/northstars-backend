// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/database.proto

package database

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Database service

func NewDatabaseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Database service

type DatabaseService interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error)
}

type databaseService struct {
	c    client.Client
	name string
}

func NewDatabaseService(name string, c client.Client) DatabaseService {
	return &databaseService{
		c:    c,
		name: name,
	}
}

func (c *databaseService) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Database.CreateAccount", in)
	out := new(CreateAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Database service

type DatabaseHandler interface {
	CreateAccount(context.Context, *CreateAccountRequest, *CreateAccountResponse) error
}

func RegisterDatabaseHandler(s server.Server, hdlr DatabaseHandler, opts ...server.HandlerOption) error {
	type database interface {
		CreateAccount(ctx context.Context, in *CreateAccountRequest, out *CreateAccountResponse) error
	}
	type Database struct {
		database
	}
	h := &databaseHandler{hdlr}
	return s.Handle(s.NewHandler(&Database{h}, opts...))
}

type databaseHandler struct {
	DatabaseHandler
}

func (h *databaseHandler) CreateAccount(ctx context.Context, in *CreateAccountRequest, out *CreateAccountResponse) error {
	return h.DatabaseHandler.CreateAccount(ctx, in, out)
}
