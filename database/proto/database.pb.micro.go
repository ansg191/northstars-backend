// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/database.proto

package database

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Database service

func NewDatabaseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Database service

type DatabaseService interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error)
	AddPhoneNumber(ctx context.Context, in *AddPhoneNumberRequest, opts ...client.CallOption) (*AddPhoneNumberResponse, error)
	RemovePhoneNumber(ctx context.Context, in *RemovePhoneNumberRequest, opts ...client.CallOption) (*RemovePhoneNumberResponse, error)
	CreateSwimmer(ctx context.Context, in *CreateSwimmerRequest, opts ...client.CallOption) (*CreateSwimmerResponse, error)
	GetSwimmer(ctx context.Context, in *GetSwimmerRequest, opts ...client.CallOption) (*GetSwimmerResponse, error)
	WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, opts ...client.CallOption) (*WatchSwimmerResponse, error)
	UnWatchSwimmer(ctx context.Context, in *UnWatchSwimmerRequest, opts ...client.CallOption) (*UnWatchSwimmerResponse, error)
}

type databaseService struct {
	c    client.Client
	name string
}

func NewDatabaseService(name string, c client.Client) DatabaseService {
	return &databaseService{
		c:    c,
		name: name,
	}
}

func (c *databaseService) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Database.CreateAccount", in)
	out := new(CreateAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Database.GetAccount", in)
	out := new(GetAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) AddPhoneNumber(ctx context.Context, in *AddPhoneNumberRequest, opts ...client.CallOption) (*AddPhoneNumberResponse, error) {
	req := c.c.NewRequest(c.name, "Database.AddPhoneNumber", in)
	out := new(AddPhoneNumberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) RemovePhoneNumber(ctx context.Context, in *RemovePhoneNumberRequest, opts ...client.CallOption) (*RemovePhoneNumberResponse, error) {
	req := c.c.NewRequest(c.name, "Database.RemovePhoneNumber", in)
	out := new(RemovePhoneNumberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) CreateSwimmer(ctx context.Context, in *CreateSwimmerRequest, opts ...client.CallOption) (*CreateSwimmerResponse, error) {
	req := c.c.NewRequest(c.name, "Database.CreateSwimmer", in)
	out := new(CreateSwimmerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) GetSwimmer(ctx context.Context, in *GetSwimmerRequest, opts ...client.CallOption) (*GetSwimmerResponse, error) {
	req := c.c.NewRequest(c.name, "Database.GetSwimmer", in)
	out := new(GetSwimmerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, opts ...client.CallOption) (*WatchSwimmerResponse, error) {
	req := c.c.NewRequest(c.name, "Database.WatchSwimmer", in)
	out := new(WatchSwimmerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) UnWatchSwimmer(ctx context.Context, in *UnWatchSwimmerRequest, opts ...client.CallOption) (*UnWatchSwimmerResponse, error) {
	req := c.c.NewRequest(c.name, "Database.UnWatchSwimmer", in)
	out := new(UnWatchSwimmerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Database service

type DatabaseHandler interface {
	CreateAccount(context.Context, *CreateAccountRequest, *CreateAccountResponse) error
	GetAccount(context.Context, *GetAccountRequest, *GetAccountResponse) error
	AddPhoneNumber(context.Context, *AddPhoneNumberRequest, *AddPhoneNumberResponse) error
	RemovePhoneNumber(context.Context, *RemovePhoneNumberRequest, *RemovePhoneNumberResponse) error
	CreateSwimmer(context.Context, *CreateSwimmerRequest, *CreateSwimmerResponse) error
	GetSwimmer(context.Context, *GetSwimmerRequest, *GetSwimmerResponse) error
	WatchSwimmer(context.Context, *WatchSwimmerRequest, *WatchSwimmerResponse) error
	UnWatchSwimmer(context.Context, *UnWatchSwimmerRequest, *UnWatchSwimmerResponse) error
}

func RegisterDatabaseHandler(s server.Server, hdlr DatabaseHandler, opts ...server.HandlerOption) error {
	type database interface {
		CreateAccount(ctx context.Context, in *CreateAccountRequest, out *CreateAccountResponse) error
		GetAccount(ctx context.Context, in *GetAccountRequest, out *GetAccountResponse) error
		AddPhoneNumber(ctx context.Context, in *AddPhoneNumberRequest, out *AddPhoneNumberResponse) error
		RemovePhoneNumber(ctx context.Context, in *RemovePhoneNumberRequest, out *RemovePhoneNumberResponse) error
		CreateSwimmer(ctx context.Context, in *CreateSwimmerRequest, out *CreateSwimmerResponse) error
		GetSwimmer(ctx context.Context, in *GetSwimmerRequest, out *GetSwimmerResponse) error
		WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, out *WatchSwimmerResponse) error
		UnWatchSwimmer(ctx context.Context, in *UnWatchSwimmerRequest, out *UnWatchSwimmerResponse) error
	}
	type Database struct {
		database
	}
	h := &databaseHandler{hdlr}
	return s.Handle(s.NewHandler(&Database{h}, opts...))
}

type databaseHandler struct {
	DatabaseHandler
}

func (h *databaseHandler) CreateAccount(ctx context.Context, in *CreateAccountRequest, out *CreateAccountResponse) error {
	return h.DatabaseHandler.CreateAccount(ctx, in, out)
}

func (h *databaseHandler) GetAccount(ctx context.Context, in *GetAccountRequest, out *GetAccountResponse) error {
	return h.DatabaseHandler.GetAccount(ctx, in, out)
}

func (h *databaseHandler) AddPhoneNumber(ctx context.Context, in *AddPhoneNumberRequest, out *AddPhoneNumberResponse) error {
	return h.DatabaseHandler.AddPhoneNumber(ctx, in, out)
}

func (h *databaseHandler) RemovePhoneNumber(ctx context.Context, in *RemovePhoneNumberRequest, out *RemovePhoneNumberResponse) error {
	return h.DatabaseHandler.RemovePhoneNumber(ctx, in, out)
}

func (h *databaseHandler) CreateSwimmer(ctx context.Context, in *CreateSwimmerRequest, out *CreateSwimmerResponse) error {
	return h.DatabaseHandler.CreateSwimmer(ctx, in, out)
}

func (h *databaseHandler) GetSwimmer(ctx context.Context, in *GetSwimmerRequest, out *GetSwimmerResponse) error {
	return h.DatabaseHandler.GetSwimmer(ctx, in, out)
}

func (h *databaseHandler) WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, out *WatchSwimmerResponse) error {
	return h.DatabaseHandler.WatchSwimmer(ctx, in, out)
}

func (h *databaseHandler) UnWatchSwimmer(ctx context.Context, in *UnWatchSwimmerRequest, out *UnWatchSwimmerResponse) error {
	return h.DatabaseHandler.UnWatchSwimmer(ctx, in, out)
}
