// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/twilio.proto

package twilio

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Twilio service

func NewTwilioEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Twilio service

type TwilioService interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error)
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...client.CallOption) (*GetMessageResponse, error)
}

type twilioService struct {
	c    client.Client
	name string
}

func NewTwilioService(name string, c client.Client) TwilioService {
	return &twilioService{
		c:    c,
		name: name,
	}
}

func (c *twilioService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error) {
	req := c.c.NewRequest(c.name, "Twilio.SendMessage", in)
	out := new(SendMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twilioService) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...client.CallOption) (*GetMessageResponse, error) {
	req := c.c.NewRequest(c.name, "Twilio.GetMessage", in)
	out := new(GetMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Twilio service

type TwilioHandler interface {
	SendMessage(context.Context, *SendMessageRequest, *SendMessageResponse) error
	GetMessage(context.Context, *GetMessageRequest, *GetMessageResponse) error
}

func RegisterTwilioHandler(s server.Server, hdlr TwilioHandler, opts ...server.HandlerOption) error {
	type twilio interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error
		GetMessage(ctx context.Context, in *GetMessageRequest, out *GetMessageResponse) error
	}
	type Twilio struct {
		twilio
	}
	h := &twilioHandler{hdlr}
	return s.Handle(s.NewHandler(&Twilio{h}, opts...))
}

type twilioHandler struct {
	TwilioHandler
}

func (h *twilioHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error {
	return h.TwilioHandler.SendMessage(ctx, in, out)
}

func (h *twilioHandler) GetMessage(ctx context.Context, in *GetMessageRequest, out *GetMessageResponse) error {
	return h.TwilioHandler.GetMessage(ctx, in, out)
}
