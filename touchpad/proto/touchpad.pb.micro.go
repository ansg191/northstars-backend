// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/touchpad.proto

package touchpad

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Touchpad service

func NewTouchpadEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Touchpad service

type TouchpadService interface {
	GetMeetInfo(ctx context.Context, in *GetMeetInfoRequest, opts ...client.CallOption) (*GetMeetInfoResponse, error)
	GetMeetEvents(ctx context.Context, in *GetMeetEventsRequest, opts ...client.CallOption) (*GetMeetEventsResponse, error)
	GetIEvent(ctx context.Context, in *GetIEventRequest, opts ...client.CallOption) (*GetIEventResponse, error)
	CheckMeetDiff(ctx context.Context, in *CheckMeetDiffRequest, opts ...client.CallOption) (*CheckMeetDiffResponse, error)
}

type touchpadService struct {
	c    client.Client
	name string
}

func NewTouchpadService(name string, c client.Client) TouchpadService {
	return &touchpadService{
		c:    c,
		name: name,
	}
}

func (c *touchpadService) GetMeetInfo(ctx context.Context, in *GetMeetInfoRequest, opts ...client.CallOption) (*GetMeetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Touchpad.GetMeetInfo", in)
	out := new(GetMeetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchpadService) GetMeetEvents(ctx context.Context, in *GetMeetEventsRequest, opts ...client.CallOption) (*GetMeetEventsResponse, error) {
	req := c.c.NewRequest(c.name, "Touchpad.GetMeetEvents", in)
	out := new(GetMeetEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchpadService) GetIEvent(ctx context.Context, in *GetIEventRequest, opts ...client.CallOption) (*GetIEventResponse, error) {
	req := c.c.NewRequest(c.name, "Touchpad.GetIEvent", in)
	out := new(GetIEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touchpadService) CheckMeetDiff(ctx context.Context, in *CheckMeetDiffRequest, opts ...client.CallOption) (*CheckMeetDiffResponse, error) {
	req := c.c.NewRequest(c.name, "Touchpad.CheckMeetDiff", in)
	out := new(CheckMeetDiffResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Touchpad service

type TouchpadHandler interface {
	GetMeetInfo(context.Context, *GetMeetInfoRequest, *GetMeetInfoResponse) error
	GetMeetEvents(context.Context, *GetMeetEventsRequest, *GetMeetEventsResponse) error
	GetIEvent(context.Context, *GetIEventRequest, *GetIEventResponse) error
	CheckMeetDiff(context.Context, *CheckMeetDiffRequest, *CheckMeetDiffResponse) error
}

func RegisterTouchpadHandler(s server.Server, hdlr TouchpadHandler, opts ...server.HandlerOption) error {
	type touchpad interface {
		GetMeetInfo(ctx context.Context, in *GetMeetInfoRequest, out *GetMeetInfoResponse) error
		GetMeetEvents(ctx context.Context, in *GetMeetEventsRequest, out *GetMeetEventsResponse) error
		GetIEvent(ctx context.Context, in *GetIEventRequest, out *GetIEventResponse) error
		CheckMeetDiff(ctx context.Context, in *CheckMeetDiffRequest, out *CheckMeetDiffResponse) error
	}
	type Touchpad struct {
		touchpad
	}
	h := &touchpadHandler{hdlr}
	return s.Handle(s.NewHandler(&Touchpad{h}, opts...))
}

type touchpadHandler struct {
	TouchpadHandler
}

func (h *touchpadHandler) GetMeetInfo(ctx context.Context, in *GetMeetInfoRequest, out *GetMeetInfoResponse) error {
	return h.TouchpadHandler.GetMeetInfo(ctx, in, out)
}

func (h *touchpadHandler) GetMeetEvents(ctx context.Context, in *GetMeetEventsRequest, out *GetMeetEventsResponse) error {
	return h.TouchpadHandler.GetMeetEvents(ctx, in, out)
}

func (h *touchpadHandler) GetIEvent(ctx context.Context, in *GetIEventRequest, out *GetIEventResponse) error {
	return h.TouchpadHandler.GetIEvent(ctx, in, out)
}

func (h *touchpadHandler) CheckMeetDiff(ctx context.Context, in *CheckMeetDiffRequest, out *CheckMeetDiffResponse) error {
	return h.TouchpadHandler.CheckMeetDiff(ctx, in, out)
}
