// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/users.proto

package users

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Users service

func NewUsersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Users service

type UsersService interface {
	CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...client.CallOption) (*CheckAccountResponse, error)
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...client.CallOption) (*VerifyUserResponse, error)
	CheckVerify(ctx context.Context, in *CheckVerifyRequest, opts ...client.CallOption) (*CheckVerifyResponse, error)
	NewUser(ctx context.Context, in *NewUserRequest, opts ...client.CallOption) (*NewUserResponse, error)
	GetSwimmers(ctx context.Context, in *GetSwimmersRequest, opts ...client.CallOption) (*GetSwimmersResponse, error)
	WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, opts ...client.CallOption) (*WatchSwimmerResponse, error)
}

type usersService struct {
	c    client.Client
	name string
}

func NewUsersService(name string, c client.Client) UsersService {
	return &usersService{
		c:    c,
		name: name,
	}
}

func (c *usersService) CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...client.CallOption) (*CheckAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Users.CheckAccount", in)
	out := new(CheckAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...client.CallOption) (*VerifyUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.VerifyUser", in)
	out := new(VerifyUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) CheckVerify(ctx context.Context, in *CheckVerifyRequest, opts ...client.CallOption) (*CheckVerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Users.CheckVerify", in)
	out := new(CheckVerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) NewUser(ctx context.Context, in *NewUserRequest, opts ...client.CallOption) (*NewUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.NewUser", in)
	out := new(NewUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) GetSwimmers(ctx context.Context, in *GetSwimmersRequest, opts ...client.CallOption) (*GetSwimmersResponse, error) {
	req := c.c.NewRequest(c.name, "Users.GetSwimmers", in)
	out := new(GetSwimmersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, opts ...client.CallOption) (*WatchSwimmerResponse, error) {
	req := c.c.NewRequest(c.name, "Users.WatchSwimmer", in)
	out := new(WatchSwimmerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersHandler interface {
	CheckAccount(context.Context, *CheckAccountRequest, *CheckAccountResponse) error
	VerifyUser(context.Context, *VerifyUserRequest, *VerifyUserResponse) error
	CheckVerify(context.Context, *CheckVerifyRequest, *CheckVerifyResponse) error
	NewUser(context.Context, *NewUserRequest, *NewUserResponse) error
	GetSwimmers(context.Context, *GetSwimmersRequest, *GetSwimmersResponse) error
	WatchSwimmer(context.Context, *WatchSwimmerRequest, *WatchSwimmerResponse) error
}

func RegisterUsersHandler(s server.Server, hdlr UsersHandler, opts ...server.HandlerOption) error {
	type users interface {
		CheckAccount(ctx context.Context, in *CheckAccountRequest, out *CheckAccountResponse) error
		VerifyUser(ctx context.Context, in *VerifyUserRequest, out *VerifyUserResponse) error
		CheckVerify(ctx context.Context, in *CheckVerifyRequest, out *CheckVerifyResponse) error
		NewUser(ctx context.Context, in *NewUserRequest, out *NewUserResponse) error
		GetSwimmers(ctx context.Context, in *GetSwimmersRequest, out *GetSwimmersResponse) error
		WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, out *WatchSwimmerResponse) error
	}
	type Users struct {
		users
	}
	h := &usersHandler{hdlr}
	return s.Handle(s.NewHandler(&Users{h}, opts...))
}

type usersHandler struct {
	UsersHandler
}

func (h *usersHandler) CheckAccount(ctx context.Context, in *CheckAccountRequest, out *CheckAccountResponse) error {
	return h.UsersHandler.CheckAccount(ctx, in, out)
}

func (h *usersHandler) VerifyUser(ctx context.Context, in *VerifyUserRequest, out *VerifyUserResponse) error {
	return h.UsersHandler.VerifyUser(ctx, in, out)
}

func (h *usersHandler) CheckVerify(ctx context.Context, in *CheckVerifyRequest, out *CheckVerifyResponse) error {
	return h.UsersHandler.CheckVerify(ctx, in, out)
}

func (h *usersHandler) NewUser(ctx context.Context, in *NewUserRequest, out *NewUserResponse) error {
	return h.UsersHandler.NewUser(ctx, in, out)
}

func (h *usersHandler) GetSwimmers(ctx context.Context, in *GetSwimmersRequest, out *GetSwimmersResponse) error {
	return h.UsersHandler.GetSwimmers(ctx, in, out)
}

func (h *usersHandler) WatchSwimmer(ctx context.Context, in *WatchSwimmerRequest, out *WatchSwimmerResponse) error {
	return h.UsersHandler.WatchSwimmer(ctx, in, out)
}
